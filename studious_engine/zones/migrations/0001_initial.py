# Generated by Django 5.0.12 on 2025-02-26 05:36

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models

# [REF:33d4e5f6-a7b8-c9d0-e1f2-a3b4c5d6e7f8:ZONE_SYSTEM]
# [CLAUDE:CHECK_PATTERN:zone_geographic_patterns]
# [CLAUDE:OPTIMIZATION_LAYER:START]
# This file is part of the zone_system component
# See .claude/README.md for more information
# [CLAUDE:OPTIMIZATION_LAYER:END]


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(choices=[(1, 'Instruments'), (2, 'Defenses'), (3, 'Materials'), (4, 'Health'), (5, 'Ornaments'), (6, 'Vessels'), (7, 'Vehicles'), (8, 'Labor'), (9, 'Commerce'), (10, 'Scripts'), (11, 'Analysis'), (12, 'Direction')], unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_governing', models.BooleanField(default=False)),
                ('governing_start_date', models.DateTimeField(blank=True, null=True)),
                ('governing_end_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zone_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(420)])),
                ('zone_type', models.CharField(max_length=255)),
                ('area', models.CharField(choices=[('agora', 'Agora (Connection)'), ('polis', 'Polis (Ideation)'), ('chora', 'Chora (Production)')], max_length=10)),
                ('rank', models.IntegerField(choices=[(1, 'Rank 1'), (2, 'Rank 2'), (3, 'Rank 3'), (4, 'Rank 4')], default=1)),
                ('city_latitude', models.FloatField(blank=True, null=True)),
                ('city_longitude', models.FloatField(blank=True, null=True)),
                ('country_latitude', models.FloatField(blank=True, null=True)),
                ('country_longitude', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zones', to='zones.sector')),
            ],
            options={
                'ordering': ['sector', 'zone_number'],
                'unique_together': {('sector', 'zone_number')},
            },
        ),
        migrations.CreateModel(
            name='ZoneHappiness',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wisdom', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('courage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('temperance', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('justice', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('strength', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('wealth', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('beauty', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('health', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('resources', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('friendships', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('honors', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('glory', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('zone', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='happiness', to='zones.zone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlayerZoneContribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('think_tank_contributions', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('production_tank_contributions', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('overall_influence', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_zone_leader', models.BooleanField(default=False)),
                ('leadership_start_date', models.DateTimeField(blank=True, null=True)),
                ('leadership_end_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zone_contributions', to='core.playerprofile')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_contributions', to='zones.zone')),
            ],
            options={
                'unique_together': {('player', 'zone')},
            },
        ),
    ]
