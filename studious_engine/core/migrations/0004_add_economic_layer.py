# Generated by Django 5.0.12 on 2025-03-05 05:47

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models

# [REF:00a1b2c3-d4e5-f6a7-b8c9-d0e1f2a3b4c5:CORE_USER_SYSTEM]
# [CLAUDE:CHECK_PATTERN:virtue_metrics_calculation]
# [CLAUDE:CHECK_PATTERN:experience_progression]
# [CLAUDE:CHECK_PATTERN:zone_geographic_patterns]
# [CLAUDE:OPTIMIZATION_LAYER:START]
# This file is part of the core_user_system component
# See .claude/README.md for more information
# [CLAUDE:OPTIMIZATION_LAYER:END]


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0003_marketitem_wishlist'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name='playerhappiness',
            name='friendships',
        ),
        migrations.RemoveField(
            model_name='playerhappiness',
            name='glory',
        ),
        migrations.RemoveField(
            model_name='playerhappiness',
            name='honors',
        ),
        migrations.RemoveField(
            model_name='playerhappiness',
            name='resources',
        ),
        migrations.RemoveField(
            model_name='playerhappiness',
            name='wealth',
        ),
        migrations.AddField(
            model_name='marketitem',
            name='reference_id',
            field=models.UUIDField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='marketitem',
            name='seller_id',
            field=models.UUIDField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='marketitem',
            name='seller_type',
            field=models.CharField(choices=[('user', 'User'), ('zone', 'Zone'), ('team', 'Team'), ('system', 'System')], default='system', max_length=10),
        ),
        migrations.AddField(
            model_name='playerhappiness',
            name='endurance',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='playerhappiness',
            name='good_score',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='playerhappiness',
            name='happiness',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='playerhappiness',
            name='last_calculated',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='playerhappiness',
            name='prosperity_score',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='playerhappiness',
            name='virtue_history',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name='playerprofile',
            name='device_settings',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name='playerprofile',
            name='economic_layer',
            field=models.CharField(choices=[('port', 'Port City (Outer Layer)'), ('laws', 'Laws Model (Middle Layer)'), ('republic', 'Republic Model (Inner Layer)')], default='port', max_length=10),
        ),
        migrations.AddField(
            model_name='playerprofile',
            name='last_active',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='playerprofile',
            name='tutorial_progress',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AlterField(
            model_name='playerhappiness',
            name='beauty',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='playerhappiness',
            name='courage',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='playerhappiness',
            name='health',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='playerhappiness',
            name='justice',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='playerhappiness',
            name='strength',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='playerhappiness',
            name='temperance',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='playerhappiness',
            name='wisdom',
            field=models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.CreateModel(
            name='Art',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('icon', models.CharField(blank=True, max_length=255, verbose_name='Icon Path')),
                ('banner_image', models.CharField(blank=True, max_length=255, verbose_name='Banner Image Path')),
                ('difficulty_level', models.IntegerField(choices=[(1, 'Beginner'), (2, 'Intermediate'), (3, 'Advanced'), (4, 'Expert'), (5, 'Master')], default=1, verbose_name='Difficulty Level')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
                ('required_virtues', models.JSONField(blank=True, default=dict, verbose_name='Required Virtues')),
                ('improved_virtues', models.JSONField(blank=True, default=dict, verbose_name='Improved Virtues')),
                ('tech_tree_level', models.IntegerField(default=1, verbose_name='Tech Tree Level')),
                ('is_unlocked_default', models.BooleanField(default=False, verbose_name='Unlocked by Default')),
                ('rank_required', models.IntegerField(default=1, verbose_name='Rank Required')),
                ('economic_layer_required', models.CharField(choices=[('PORT', 'Port'), ('LAWS', 'Laws'), ('REPUBLIC', 'Republic')], default='PORT', max_length=20, verbose_name='Economic Layer Required')),
                ('practice_method', models.CharField(choices=[('SOLO', 'Solo'), ('PAIR', 'Pair'), ('GROUP', 'Group')], default='SOLO', max_length=20, verbose_name='Practice Method')),
                ('average_mastery_time_days', models.IntegerField(default=30, verbose_name='Average Mastery Time (Days)')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('parent_arts', models.ManyToManyField(blank=True, related_name='child_arts', to='core.art', verbose_name='Parent Arts')),
            ],
            options={
                'verbose_name': 'Art',
                'verbose_name_plural': 'Arts',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ArtParts',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('order_index', models.IntegerField(default=0, verbose_name='Order Index')),
                ('practice_method', models.CharField(choices=[('THEORY', 'Theory'), ('PRACTICE', 'Practice'), ('CREATION', 'Creation'), ('REFLECTION', 'Reflection'), ('TEACHING', 'Teaching')], default='PRACTICE', max_length=20, verbose_name='Practice Method')),
                ('practice_description', models.TextField(verbose_name='Practice Description')),
                ('validation_method', models.CharField(choices=[('SELF', 'Self-Validation'), ('PEER', 'Peer Review'), ('MENTOR', 'Mentor Approval'), ('SYSTEM', 'System Verification')], default='SELF', max_length=20, verbose_name='Validation Method')),
                ('estimated_hours', models.IntegerField(default=1, verbose_name='Estimated Hours')),
                ('resources_required', models.JSONField(blank=True, default=dict, verbose_name='Resources Required')),
                ('media_references', models.JSONField(blank=True, default=list, verbose_name='Media References')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('art', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parts', to='core.art', verbose_name='Art')),
            ],
            options={
                'verbose_name': 'Art Part',
                'verbose_name_plural': 'Art Parts',
                'ordering': ['art', 'order_index'],
                'unique_together': {('art', 'order_index')},
            },
        ),
        migrations.CreateModel(
            name='ArtStage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('order_index', models.IntegerField(default=0, verbose_name='Order Index')),
                ('mastery_threshold', models.IntegerField(default=20, verbose_name='Mastery Threshold')),
                ('stage_badge', models.CharField(blank=True, max_length=255, verbose_name='Stage Badge Path')),
                ('virtue_bonuses', models.JSONField(blank=True, default=dict, verbose_name='Virtue Bonuses')),
                ('unlock_requirements', models.JSONField(blank=True, default=dict, verbose_name='Unlock Requirements')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('art', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stages', to='core.art', verbose_name='Art')),
            ],
            options={
                'verbose_name': 'Art Stage',
                'verbose_name_plural': 'Art Stages',
                'ordering': ['art', 'order_index'],
                'unique_together': {('art', 'order_index')},
            },
        ),
        migrations.CreateModel(
            name='ArtTaxonomy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('level', models.IntegerField(choices=[(1, 'Category'), (2, 'Subcategory'), (3, 'Specialty')], default=1, verbose_name='Level')),
                ('path', models.CharField(blank=True, max_length=255, verbose_name='Path')),
                ('icon', models.CharField(blank=True, max_length=255, verbose_name='Icon Path')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='core.arttaxonomy', verbose_name='Parent Taxonomy')),
            ],
            options={
                'verbose_name': 'Art Taxonomy',
                'verbose_name_plural': 'Art Taxonomies',
                'ordering': ['level', 'name'],
            },
        ),
        migrations.AddField(
            model_name='art',
            name='taxonomy',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='arts', to='core.arttaxonomy', verbose_name='Taxonomy'),
        ),
        migrations.CreateModel(
            name='PracticeSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Started At')),
                ('duration_minutes', models.PositiveIntegerField(default=0, verbose_name='Duration (Minutes)')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('rating', models.PositiveSmallIntegerField(blank=True, help_text='User self-rating from 1-5', null=True, verbose_name='Rating')),
                ('validated', models.BooleanField(default=False, verbose_name='Validated')),
                ('completed', models.BooleanField(default=False, verbose_name='Completed')),
                ('experience_gained', models.PositiveIntegerField(default=0, verbose_name='Experience Gained')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('art', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='practice_sessions', to='core.art', verbose_name='Art')),
                ('part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='practice_sessions', to='core.artparts', verbose_name='Art Part')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='practice_sessions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Practice Session',
                'verbose_name_plural': 'Practice Sessions',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='TechTree',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('level', models.IntegerField(default=1, verbose_name='Level')),
                ('required_arts', django.contrib.postgres.fields.ArrayField(base_field=models.UUIDField(), blank=True, default=list, help_text='UUIDs of arts required to unlock this tech tree node', size=None, verbose_name='Required Arts')),
                ('unlocks_arts', django.contrib.postgres.fields.ArrayField(base_field=models.UUIDField(), blank=True, default=list, help_text='UUIDs of arts unlocked by this tech tree node', size=None, verbose_name='Unlocks Arts')),
                ('required_resources', models.JSONField(blank=True, default=dict, verbose_name='Required Resources')),
                ('required_zone_level', models.IntegerField(default=1, verbose_name='Required Zone Level')),
                ('zone_type_filter', models.CharField(choices=[('ANY', 'Any Zone'), ('ACADEMIC', 'Academic'), ('CULTURAL', 'Cultural'), ('NATURAL', 'Natural'), ('SOCIAL', 'Social'), ('ECONOMIC', 'Economic'), ('GOVERNANCE', 'Governance'), ('INNOVATION', 'Innovation')], default='ANY', max_length=20, verbose_name='Zone Type Filter')),
                ('position_x', models.IntegerField(default=0, verbose_name='X Position')),
                ('position_y', models.IntegerField(default=0, verbose_name='Y Position')),
                ('icon', models.CharField(blank=True, max_length=255, verbose_name='Icon Path')),
                ('unlock_message', models.TextField(blank=True, verbose_name='Unlock Message')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('parent_nodes', models.ManyToManyField(blank=True, related_name='child_nodes', to='core.techtree', verbose_name='Parent Nodes')),
            ],
            options={
                'verbose_name': 'Tech Tree',
                'verbose_name_plural': 'Tech Trees',
                'ordering': ['level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('current_zone_id', models.UUIDField(blank=True, null=True)),
                ('previous_zones', models.JSONField(blank=True, default=list)),
                ('accuracy_meters', models.FloatField(default=0)),
                ('device_id', models.CharField(blank=True, max_length=255)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='location', to='core.playerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interface_settings', models.JSONField(blank=True, default=dict)),
                ('notification_preferences', models.JSONField(blank=True, default=dict)),
                ('privacy_settings', models.JSONField(blank=True, default=dict)),
                ('ai_guide_settings', models.JSONField(blank=True, default=dict)),
                ('language_preference', models.CharField(default='en', max_length=10)),
                ('accessibility_options', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('player', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to='core.playerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='ArtMastery',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('discovery_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Discovery Date')),
                ('mastery_level', models.IntegerField(default=0, verbose_name='Mastery Level')),
                ('last_practiced', models.DateTimeField(blank=True, null=True, verbose_name='Last Practiced')),
                ('practice_streak', models.IntegerField(default=0, verbose_name='Practice Streak')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Is Featured')),
                ('practice_history', models.JSONField(blank=True, default=list, verbose_name='Practice History')),
                ('completed_parts', models.JSONField(blank=True, default=list, verbose_name='Completed Parts')),
                ('public_portfolio', models.BooleanField(default=False, verbose_name='Public Portfolio')),
                ('mastery_achievements', models.JSONField(blank=True, default=list, verbose_name='Mastery Achievements')),
                ('notes', models.TextField(blank=True, verbose_name='Personal Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('art', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='masteries', to='core.art', verbose_name='Art')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='art_masteries', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('current_part', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='current_users', to='core.artparts', verbose_name='Current Part')),
            ],
            options={
                'verbose_name': 'Art Mastery',
                'verbose_name_plural': 'Art Masteries',
                'ordering': ['-mastery_level', 'art__name'],
                'unique_together': {('user', 'art')},
            },
        ),
        migrations.CreateModel(
            name='UserArtStageProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reached_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Reached Date')),
                ('is_current', models.BooleanField(default=True, verbose_name='Is Current')),
                ('completion_percentage', models.IntegerField(default=0, verbose_name='Completion Percentage')),
                ('notable_achievements', models.JSONField(blank=True, default=list, verbose_name='Notable Achievements')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('art_stage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='core.artstage', verbose_name='Art Stage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='art_stage_progress', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Art Stage Progress',
                'verbose_name_plural': 'User Art Stage Progress',
                'ordering': ['art_stage__art', 'art_stage__order_index'],
                'unique_together': {('user', 'art_stage')},
            },
        ),
        migrations.CreateModel(
            name='UserTechTreeProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('unlocked_date', models.DateTimeField(blank=True, null=True, verbose_name='Unlocked Date')),
                ('progress_percentage', models.IntegerField(default=0, verbose_name='Progress Percentage')),
                ('missing_requirements', models.JSONField(blank=True, default=dict, verbose_name='Missing Requirements')),
                ('is_unlocked', models.BooleanField(default=False, verbose_name='Is Unlocked')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('tech_tree', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='core.techtree', verbose_name='Tech Tree')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tech_tree_progress', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Tech Tree Progress',
                'verbose_name_plural': 'User Tech Tree Progress',
                'ordering': ['tech_tree__level', 'tech_tree__name'],
                'unique_together': {('user', 'tech_tree')},
            },
        ),
    ]
