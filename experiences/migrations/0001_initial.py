# Generated by Django 5.0.12 on 2025-02-26 05:36

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('zones', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Power',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('power_type', models.CharField(choices=[('idea', 'Idea'), ('skill', 'Skill'), ('technology', 'Technology')], max_length=10)),
                ('rarity', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('complexity', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('is_public', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('prerequisites', models.ManyToManyField(blank=True, related_name='unlocks', to='experiences.power')),
                ('sector', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='powers', to='zones.sector')),
            ],
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('experience_type', models.CharField(choices=[('quest', 'Quest'), ('challenge', 'Challenge'), ('collaboration', 'Collaboration'), ('innovation', 'Innovation'), ('reflection', 'Reflection')], max_length=15)),
                ('matrix_position', models.CharField(choices=[('soul_out', 'Soul Out (Think Tank)'), ('soul_in', 'Soul In (Review)'), ('body_out', 'Body Out (Production Tank)'), ('body_in', 'Body In (Market)')], max_length=10)),
                ('art_type', models.CharField(choices=[('imitation', 'Imitation'), ('production', 'Production'), ('usage', 'Usage')], max_length=10)),
                ('good_type', models.CharField(choices=[('present', 'Present Good'), ('present_future', 'Present/Future Good'), ('future', 'Future Good')], max_length=15)),
                ('difficulty', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('duration_minutes', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('happiness_reward', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('experience_reward', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('definition', models.TextField(verbose_name='What it is')),
                ('end', models.TextField(verbose_name='Its purpose')),
                ('parts', models.TextField(verbose_name='Its components')),
                ('matter', models.TextField(verbose_name='The materials it uses')),
                ('instrument', models.TextField(verbose_name='The tools it requires')),
                ('is_active', models.BooleanField(default=True)),
                ('minimum_rank', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('associated_zones', models.ManyToManyField(blank=True, related_name='experiences', to='zones.zone')),
                ('prerequisite_experiences', models.ManyToManyField(blank=True, related_name='unlocks', to='experiences.experience')),
                ('required_powers', models.ManyToManyField(blank=True, related_name='required_for_experiences', to='experiences.power')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pull', 'Pull - Identified'), ('think', 'Think - Planning'), ('do', 'Do - Implementing'), ('review', 'Review - Evaluating'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='pull', max_length=10)),
                ('progress', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('reflection_notes', models.TextField(blank=True)),
                ('resources_committed', models.JSONField(blank=True, default=dict)),
                ('happiness_gained', models.IntegerField(default=0)),
                ('experience_gained', models.IntegerField(default=0)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_experiences', to='experiences.experience')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiences', to='core.playerprofile')),
            ],
            options={
                'unique_together': {('player', 'experience')},
            },
        ),
        migrations.CreateModel(
            name='PlayerPower',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('experience', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('acquired_at', models.DateTimeField(auto_now_add=True)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='powers', to='core.playerprofile')),
                ('power', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_powers', to='experiences.power')),
            ],
            options={
                'unique_together': {('player', 'power')},
            },
        ),
    ]
