# Generated by Django 5.0.12 on 2025-02-26 05:36

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('experiences', '0001_initial'),
        ('zones', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Innovation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('current_stage', models.CharField(choices=[('initiation', 'Initiation (0%)'), ('conception', 'Conception - Order & Arrangement (25%)'), ('refinement', 'Refinement - Eurythmy & Symmetry (50%)'), ('validation', 'Validation - Propriety (75%)'), ('implementation', 'Implementation - Economy (100%)')], default='initiation', max_length=15)),
                ('progress', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('order_components', models.TextField(blank=True, verbose_name='Identified Components')),
                ('order_metrics', models.TextField(blank=True, verbose_name='Established Metrics')),
                ('arrangement_ground_plan', models.TextField(blank=True, verbose_name='Ground Plan')),
                ('arrangement_elevation', models.TextField(blank=True, verbose_name='Elevation')),
                ('arrangement_perspective', models.TextField(blank=True, verbose_name='Perspective')),
                ('eurythmy_components', models.TextField(blank=True, verbose_name='Component Optimizations')),
                ('symmetry_standard', models.TextField(blank=True, verbose_name='Standard Unit')),
                ('symmetry_relations', models.TextField(blank=True, verbose_name='Component Relations')),
                ('propriety_principles', models.TextField(blank=True, verbose_name='Principles')),
                ('propriety_justification', models.TextField(blank=True, verbose_name='Justification')),
                ('economy_resources', models.TextField(blank=True, verbose_name='Resource Management')),
                ('economy_implementation', models.TextField(blank=True, verbose_name='Implementation Plan')),
                ('is_approved', models.BooleanField(default=False)),
                ('implementation_date', models.DateTimeField(blank=True, null=True)),
                ('expected_impact', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('actual_impact', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('affects_tech_tree', models.BooleanField(default=False)),
                ('tech_tree_node', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='innovations', to='zones.sector')),
                ('zones', models.ManyToManyField(blank=True, related_name='innovations', to='zones.zone')),
            ],
        ),
        migrations.CreateModel(
            name='InnovationContribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stage', models.CharField(choices=[('initiation', 'Initiation (0%)'), ('conception', 'Conception - Order & Arrangement (25%)'), ('refinement', 'Refinement - Eurythmy & Symmetry (50%)'), ('validation', 'Validation - Propriety (75%)'), ('implementation', 'Implementation - Economy (100%)')], max_length=15)),
                ('contribution_description', models.TextField()),
                ('impact_level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('experience_reward', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('happiness_reward', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('contributed_at', models.DateTimeField(auto_now_add=True)),
                ('innovation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_contributions', to='innovations.innovation')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='innovation_contributions', to='core.playerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='TechTreeNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('level', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('is_unlocked', models.BooleanField(default=False)),
                ('unlocked_at', models.DateTimeField(blank=True, null=True)),
                ('icon', models.CharField(blank=True, max_length=255)),
                ('position_x', models.IntegerField(default=0)),
                ('position_y', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('prerequisites', models.ManyToManyField(blank=True, related_name='unlocks', to='innovations.techtreenode')),
                ('sector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tech_tree_nodes', to='zones.sector')),
                ('unlocked_by_innovation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='unlocked_tech', to='innovations.innovation')),
                ('unlocked_experiences', models.ManyToManyField(blank=True, related_name='unlocked_by_tech', to='experiences.experience')),
                ('unlocked_powers', models.ManyToManyField(blank=True, related_name='unlocked_by_tech', to='experiences.power')),
            ],
            options={
                'ordering': ['level', 'name'],
            },
        ),
    ]
